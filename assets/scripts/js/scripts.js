// Generated by CoffeeScript 1.6.3
/*
#============================================================
#
# Math augmentation.
#
# @author Matthew Wagerfield @mwagerfield
#
#============================================================
*/


(function() {
  var Class, Color, DANBO, DEBUG, DOGTAG, ENVIRONMENT, Ease, Layout, NAUTILUS, PROJECT, SCENE, SHADERS, Utils, log, moduleKeywords, namespace, warn, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Math.PI2 = Math.PI * 2;

  Math.PIH = Math.PI / 2;

  Math.PIQ = Math.PI / 4;

  Math.PIR = 180 / Math.PI;

  Math.PID = Math.PI / 180;

  /*
  # Converts radians to degrees.
  # @param {number} radians The radians to convert.
  # @return {number} The value in degrees.
  */


  Math.radiansToDegrees = function(radians) {
    return radians * Math.PIR;
  };

  /*
  # Converts degrees to radians.
  # @param {number} degrees The degrees to convert.
  # @return {number} The value in radians.
  */


  Math.degreesToRadians = function(degrees) {
    return degrees * Math.PID;
  };

  /*
  # Normalises a given value.
  # @param {number} value The value to normalise.
  # @param {number} min The minimum value in the range.
  # @param {number} max The maximum value in the range.
  # @return {value} The normalised number.
  */


  Math.normalise = function(value, min, max) {
    if (min == null) {
      min = 0;
    }
    if (max == null) {
      max = 1;
    }
    return (value - min) / (max - min);
  };

  Math.normalize = Math.normalise;

  /*
  # Interpolates between two values by a given multiplier.
  # @param {number} value The multiplier value.
  # @param {number} min The minimum value in the range.
  # @param {number} max The maximum value in the range.
  # @return {value} The interpolated number.
  */


  Math.interpolate = function(value, min, max) {
    return min + (max - min) * value;
  };

  /*
  # Maps a value within a certain range to another range.
  # @param {number} value The value to map.
  # @param {number} min1 The minimum value in the first range.
  # @param {number} max1 The maximum value in the first range.
  # @param {number} min2 The minimum value in the second range.
  # @param {number} max2 The maximum value in the second range.
  # @return {value} The mapped number.
  */


  Math.map = function(value, min1, max1, min2, max2) {
    return Math.interpolate(Math.normalise(value, min1, max1), min2, max2);
  };

  /*
  # Clamps a number within a specified range.
  # @param {number} value The value to clamp.
  # @param {number} min The minimum value.
  # @param {number} max The maximum value.
  # @return {value} The clamped number.
  */


  Math.clamp = function(value, min, max) {
    value = Math.max(value, min);
    value = Math.min(value, max);
    return value;
  };

  /*
  # Return the sign of the value.
  # @param {number} value The number.
  # @return {value} 1 or -1 depending on the sign.
  */


  Math.sign = function(value) {
    if (value >= 0) {
      return 1;
    } else {
      return -1;
    }
  };

  /*
  # Generates a random number within a specified range.
  # @param {number} min Minimum number in the range.
  # @param {number} max Maximum number in the range.
  # @param {boolean} round Whether or not to round the generated value.
  # @return {number} Random number within the specified range.
  */


  Math.randomInRange = function(min, max, round) {
    var value;
    if (round == null) {
      round = false;
    }
    value = Math.map(Math.random(), 0, 1, min, max);
    if (round) {
      value = Math.round(value);
    }
    return value;
  };

  /*
  # Projects a geographic coordinate into a 3D vertex.
  # @param {number} x The horizontal component.
  # @param {number} y The vertical component.
  # @param {number} radius The length of the vector.
  # @return {THREE.Vector3} Projected vector coordinate.
  */


  Math.project = function(x, y, radius) {
    var cosX, cosY, sinX, sinY, z;
    if (radius == null) {
      radius = 1;
    }
    x = Math.degreesToRadians(x);
    y = Math.degreesToRadians(y);
    sinX = Math.sin(x);
    cosX = Math.cos(x);
    sinY = Math.sin(y);
    cosY = Math.cos(y);
    x = -radius * cosY * cosX;
    y = radius * sinY;
    z = radius * cosY * sinX;
    return [x, y, z];
  };

  /* --------------------------------------------
       Begin Ease.coffee
  --------------------------------------------
  */


  /*
  #============================================================
  #
  # Easing functions.
  #
  # @param {number} t Time.
  # @param {number} d Duration.
  # @param {number} b Beginning value.
  # @param {number} c Total change.
  #
  # @author Matthew Wagerfield @mwagerfield
  #
  #============================================================
  */


  Ease = (function() {
    /*
    #========================================
    # Quadratic
    #========================================
    */

    function Ease() {}

    Ease.quadIn = function(t, d, b, c) {
      return c * (t /= d) * t + b;
    };

    Ease.quadOut = function(t, d, b, c) {
      return -c * (t /= d) * (t - 2) + b;
    };

    Ease.quadInOut = function(t, d, b, c) {
      if ((t /= d / 2) < 1) {
        return c / 2 * t * t + b;
      }
      return -c / 2 * ((--t) * (t - 2) - 1) + b;
    };

    /*
    #========================================
    # Cubic
    #========================================
    */


    Ease.cubicIn = function(t, d, b, c) {
      return c * (Math.pow(t / d, 3)) + b;
    };

    Ease.cubicOut = function(t, d, b, c) {
      return c * ((Math.pow(t / d - 1, 3)) + 1) + b;
    };

    Ease.cubicInOut = function(t, d, b, c) {
      if ((t /= d / 2) < 1) {
        return c / 2 * (Math.pow(t, 3)) + b;
      }
      return c / 2 * ((Math.pow(t - 2, 3)) + 2) + b;
    };

    /*
    #========================================
    # Quartic
    #========================================
    */


    Ease.quartIn = function(t, d, b, c) {
      return c * (Math.pow(t / d, 4)) + b;
    };

    Ease.quartOut = function(t, d, b, c) {
      return -c * ((Math.pow(t / d - 1, 4)) - 1) + b;
    };

    Ease.quartInOut = function(t, d, b, c) {
      if ((t /= d / 2) < 1) {
        return c / 2 * (Math.pow(t, 4)) + b;
      }
      return -c / 2 * ((Math.pow(t - 2, 4)) - 2) + b;
    };

    /*
    #========================================
    # Quintic
    #========================================
    */


    Ease.quintIn = function(t, d, b, c) {
      return c * (Math.pow(t / d, 5)) + b;
    };

    Ease.quintOut = function(t, d, b, c) {
      return c * ((Math.pow(t / d - 1, 5)) + 1) + b;
    };

    Ease.quintInOut = function(t, d, b, c) {
      if ((t /= d / 2) < 1) {
        return c / 2 * (Math.pow(t, 5)) + b;
      }
      return c / 2 * ((Math.pow(t - 2, 5)) + 2) + b;
    };

    /*
    #========================================
    # Exponential
    #========================================
    */


    Ease.expoIn = function(t, d, b, c) {
      return c * (Math.pow(2, 10 * (t / d - 1))) + b;
    };

    Ease.expoOut = function(t, d, b, c) {
      return c * (-(Math.pow(2, -10 * t / d)) + 1) + b;
    };

    Ease.expoInOut = function(t, d, b, c) {
      if ((t /= d / 2) < 1) {
        return c / 2 * (Math.pow(2, 10 * (t - 1))) + b;
      }
      return c / 2 * (-(Math.pow(2, -10 * --t)) + 2) + b;
    };

    return Ease;

  })();

  /* --------------------------------------------
       Begin Color.coffee
  --------------------------------------------
  */


  /*
  #============================================================
  #
  # Collection of colour methods.
  #
  # @requires three.js
  # @see https://github.com/mrdoob/three.js/
  #
  # @author Matthew Wagerfield @mwagerfield
  #
  #============================================================
  */


  Color = (function() {
    /*
    # Converts a hex string ().
    # @param {number} hex Hex value of the color.
    # @param {number} range Range of the color.
    # @return {object} The Color.
    */

    function Color() {}

    Color.rgb = function(hex, range) {
      var b, g, r;
      if (range == null) {
        range = 255;
      }
      hex = hex.replace('#', '');
      return {
        r: (r = (parseInt(hex.substring(0, 2), 16)) / range),
        g: (g = (parseInt(hex.substring(2, 4), 16)) / range),
        b: (b = (parseInt(hex.substring(4, 6), 16)) / range),
        colors: [r, g, b]
      };
    };

    /*
    # Converts a hex string ().
    # @param {number} hex Hex value of the color.
    # @param {number} alpha Opacity of the color.
    # @param {number} range Range of the color.
    # @return {object} The Color.
    */


    Color.rgba = function(hex, alpha, range) {
      var color;
      if (range == null) {
        range = 255;
      }
      color = this.rgb(hex, range);
      color.a = alpha;
      color.colors.push(alpha);
      return color;
    };

    return Color;

  })();

  /* --------------------------------------------
       Begin Utils.coffee
  --------------------------------------------
  */


  /*
  #============================================================
  #
  # Generic Utilities
  #
  # @author Matthew Wagerfield @mwagerfield
  #
  #============================================================
  */


  Utils = (function() {
    /*
    # Generates a GUID.
    # @param {number} length The length of the guid.
    # @param {string} prefix String to prefix the GUID with.
    # @return {string} The generated GUID.
    */

    function Utils() {}

    Utils.guid = function(length, prefix) {
      var guid, i;
      if (length == null) {
        length = 8;
      }
      if (prefix == null) {
        prefix = 'mw';
      }
      guid = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; 0 <= length ? _i < length : _i > length; i = 0 <= length ? ++_i : --_i) {
          _results.push((Math.random().toFixed(1)).substr(2));
        }
        return _results;
      })();
      guid = "" + prefix + (guid.join(''));
      return guid;
    };

    return Utils;

  })();

  /* --------------------------------------------
       Begin Class.coffee
  --------------------------------------------
  */


  /*
  #============================================================
  #
  # Abstract Class
  #
  # Intergrates mixins into CoffeeScript classes.
  #
  # @author Matthew Wagerfield @mwagerfield
  # @example
  #
  #  # Object that properties will be added to the User class
  #  classProperties =
  #    find: (id) ->
  #    create: (attrs) ->
  #
  #  # Object that properties will be added to the prototype object
  #  # of the User class (all instances of the class will get it)
  #  instanceProperties =
  #    save: ->
  #
  #  class User extends Class
  #    @extend classProperties
  #    @include instanceProperties
  #
  #  # Call class method added with 'extend'
  #  user = User.find(1)
  #
  #  # Call instance method added with 'include'
  #  user = new User
  #  user.save()
  #
  #  or shortcut (do both 'extend' and 'include'):
  #
  #  # Object with properties to be added to the User class
  #  ORM =
  #    find: (id) ->
  #    create: (attrs) ->
  #    extended: ->
  #      @include
  #        save: ->
  #
  #  class User extends Class
  #    @extend ORM
  #
  #============================================================
  */


  moduleKeywords = ['extended', 'included', 'class', 'constructor'];

  Class = (function() {
    /*
    #========================================
    # Class Variables
    #========================================
    */

    function Class() {}

    Class["class"] = 'Class';

    Class.name = null;

    /*
    #========================================
    # Class Methods
    #========================================
    */


    Class.extend = function(object) {
      var key, value, _ref;
      for (key in object) {
        value = object[key];
        if (__indexOf.call(moduleKeywords, key) < 0) {
          this[key] = value;
        }
      }
      if ((_ref = object.extended) != null) {
        _ref.apply(this);
      }
      return this;
    };

    /*
    # Extends the class with instance properties
    */


    Class.include = function(object) {
      var key, value, _ref;
      for (key in object) {
        value = object[key];
        if (__indexOf.call(moduleKeywords, key) < 0) {
          this.prototype[key] = value;
        }
      }
      if ((_ref = object.included) != null) {
        _ref.apply(this);
      }
      return this;
    };

    /*
    #========================================
    # Instance Methods
    #========================================
    */


    Class.prototype["class"] = function() {
      return this.constructor["class"];
    };

    Class.prototype.initialise = function() {
      this.name = this["class"]().replace(/^.+\./, '');
      log("initialise: " + (this["class"]()));
    };

    return Class;

  })();

  /* --------------------------------------------
       Begin Base.coffee
  --------------------------------------------
  */


  /*
  #============================================================
  #
  # Project Base
  #
  # Defines the project name and namespace as well as some
  # conveniece methods for logging messages to the console.
  #
  # @author Matthew Wagerfield @mwagerfield
  #
  #============================================================
  */


  DEBUG = true;

  DOGTAG = 'danbo';

  this[DOGTAG] = {};

  /*
  # Logs the provided values in the console.
  # @param {object} values The values to be logged.
  */


  log = function() {
    var values;
    values = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (typeof console !== "undefined" && console !== null) {
      console.log.apply(console, ["" + DOGTAG + " »"].concat(__slice.call(values)));
    }
  };

  /*
  # Logs a warning in the console.
  # @param {object} values The values to be logged.
  */


  warn = function() {
    var values;
    values = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (typeof console !== "undefined" && console !== null) {
      console.warn.apply(console, ["" + DOGTAG + " »"].concat(__slice.call(values)));
    }
  };

  /*
  # First checks for the provided namespace, and creates it if not found.
  # @param {string} namespace The namespace as a string.
  # @return {object} Reference to the most nested object in the namespace.
  */


  namespace = function(namespace) {
    var space, target, _i, _len, _ref;
    target = this[DOGTAG];
    if (typeof namespace === 'string') {
      _ref = namespace.split('.');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        space = _ref[_i];
        target = target[space] != null ? target[space] : target[space] = {};
      }
    }
    return target;
  };

  PROJECT = namespace();

  SHADERS = namespace('shaders');

  SCENE = namespace('scene');

  NAUTILUS = namespace('nautilus');

  ENVIRONMENT = namespace('environment');

  /* --------------------------------------------
       Begin Layout.coffee
  --------------------------------------------
  */


  /*
  #============================================================
  #
  # Layout
  #
  # @author Matthew Wagerfield @mwagerfield
  #
  #============================================================
  */


  Layout = (function() {
    /*
    #========================================
    # Constants
    #========================================
    */

    var DELAY;

    DELAY = 200;

    /*
    #========================================
    # Instance Variables
    #========================================
    */


    Layout.prototype.$window = null;

    Layout.prototype.$document = null;

    Layout.prototype.documentHeight = 0;

    Layout.prototype.documentWidth = 0;

    Layout.prototype.windowHeight = 0;

    Layout.prototype.windowWidth = 0;

    Layout.prototype.resized = null;

    /*
    #========================================
    # Instance Methods
    #========================================
    */


    function Layout() {
      this.onWindowResize = __bind(this.onWindowResize, this);
      this.addEventListeners = __bind(this.addEventListeners, this);
      this.dimensions = __bind(this.dimensions, this);
      this.initialise = __bind(this.initialise, this);
      this.$window = $(window);
      this.$document = $(document);
      this.resized = new signals.Signal;
      return;
    }

    Layout.prototype.initialise = function() {
      this.dimensions();
      this.addEventListeners();
    };

    Layout.prototype.dimensions = function() {
      return {
        documentHeight: this.documentHeight = this.$document.height(),
        documentWidth: this.documentWidth = this.$document.width(),
        windowHeight: this.windowHeight = this.$window.height(),
        windowWidth: this.windowWidth = this.$window.width()
      };
    };

    Layout.prototype.addEventListeners = function() {
      this.$window.on('resize', _.debounce(this.onWindowResize, DELAY));
    };

    /*
    #========================================
    # Callbacks
    #========================================
    */


    Layout.prototype.onWindowResize = function(event) {
      var dh, dw, wh, ww;
      ww = this.windowWidth !== this.$window.width();
      wh = this.windowHeight !== this.$window.height();
      dw = this.documentWidth !== this.$document.width();
      dh = this.documentHeight !== this.$document.height();
      if (dh || dw || wh || ww) {
        this.resized.dispatch(this.dimensions());
      }
    };

    return Layout;

  })();

  /* --------------------------------------------
       Begin Scene.coffee
  --------------------------------------------
  */


  /*
  #============================================================
  #
  # Danbo: Scene Composition
  #
  # @author Matthew Wagerfield @mwagerfield
  #
  #============================================================
  */


  SCENE.Scene = (function(_super) {
    __extends(Scene, _super);

    /*
    #========================================
    # Class Variables
    #========================================
    */


    function Scene() {
      this.onResize = __bind(this.onResize, this);
      this.update = __bind(this.update, this);
      this.addEventListeners = __bind(this.addEventListeners, this);
      this.initialise = __bind(this.initialise, this);
      _ref = Scene.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Scene["class"] = 'SCENE.Scene';

    /*
    #========================================
    # Instance Variables
    #========================================
    */


    Scene.prototype.$context = null;

    /*
    #========================================
    # Instance Methods
    #========================================
    */


    Scene.prototype.initialise = function($context) {
      this.$context = $context;
      Scene.__super__.initialise.apply(this, arguments);
      this.addEventListeners();
    };

    Scene.prototype.addEventListeners = function() {
      DANBO.layout.resized.add(this.onResize);
    };

    Scene.prototype.update = function() {};

    /*
    #========================================
    # Callbacks
    #========================================
    */


    Scene.prototype.onResize = function(dimensions) {};

    return Scene;

  })(Class);

  /* --------------------------------------------
       Begin Main.coffee
  --------------------------------------------
  */


  /*
  #============================================================
  #
  # Danbo: Main Class
  #
  # @author Matthew Wagerfield @mwagerfield
  #
  #============================================================
  */


  PROJECT.Main = (function(_super) {
    __extends(Main, _super);

    /*
    #========================================
    # Class Variables
    #========================================
    */


    Main["class"] = 'PROJECT.Main';

    /*
    #========================================
    # Instance Variables
    #========================================
    */


    Main.prototype.$html = null;

    Main.prototype.$body = null;

    Main.prototype.$container = null;

    Main.prototype.$scene = null;

    Main.prototype.layout = null;

    Main.prototype.scene = null;

    Main.prototype.raf = null;

    /*
    #========================================
    # Instance Methods
    #========================================
    */


    function Main() {
      this.update = __bind(this.update, this);
      this.animate = __bind(this.animate, this);
      this.addClasses = __bind(this.addClasses, this);
      this.initialise = __bind(this.initialise, this);
      this.$html = $('html');
      this.$body = $('body');
      this.$container = this.$body.find('#container');
      this.$scene = this.$container.find('#scene');
      return;
    }

    Main.prototype.initialise = function() {
      Main.__super__.initialise.apply(this, arguments);
      this.addClasses();
      this.animate();
    };

    Main.prototype.addClasses = function() {
      this.layout = new Layout;
      this.layout.initialise();
      this.scene = new SCENE.Scene;
      this.scene.initialise(this.$scene);
    };

    Main.prototype.animate = function() {
      this.raf = requestAnimationFrame(this.animate);
      this.update();
    };

    Main.prototype.update = function() {
      this.scene.update();
    };

    return Main;

  })(Class);

  this.DANBO = DANBO = new PROJECT.Main;

  /* --------------------------------------------
       Begin scripts.coffee
  --------------------------------------------
  */


  $(function() {
    return DANBO.initialise();
  });

}).call(this);
